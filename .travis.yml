# Travis CI (MIT License) configuration file for Experimental Features
# @link https://travis-ci.org/

# Bionic image has PHP versions 7.1,7.2,7.3 pre-installed
dist: bionic

# Bionic does not start mysql or memcached by default
services:
  - mysql
  - memcached

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# PHP version.
php:
  - '7.3'

# Specify when Travis should build.
branches:
  only:
    - main

cache:
  directories:
    - $HOME/.config/composer/cache

# Git clone depth.
git:
  depth: 1
  quiet: true

matrix:
  fast_finish: true

  include:
    - env: WP_VERSION=latest PHP_LINT=1
    - env: WP_VERSION=latest WP_PHPCS=1 WP_TRAVIS_OBJECT_CACHE=1
    - env: WP_VERSION=trunk

# Prepare your build for testing.
# Failures in this section will result in build status 'errored'.
before_script:
  # Turn off Xdebug. See https://core.trac.wordpress.org/changeset/40138.
  - phpenv config-rm xdebug.ini || echo "Xdebug not available"

  # Properly set Composer path.
  - export PATH="$HOME/.config/composer/vendor/bin:$PATH"

  # Install phpunit.
  - composer global require "phpunit/phpunit=6.5.*"

  # Set up WordPress installation.
  - export WP_CORE_DIR=/tmp/wordpress/
  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

  # Maybe set up phpcs.
  - |
    if [[ -n "${WP_PHPCS}" ]]; then
      composer g require --dev automattic/vipwpcs dealerdirect/phpcodesniffer-composer-installer
    fi

  # Maybe set up the object cache.
  - |
    if [[ -n "${WP_TRAVIS_OBJECT_CACHE}" ]]; then
      printf "\n" | pecl install --force memcache 1> /dev/null
      curl -s https://raw.githubusercontent.com/Automattic/wp-memcached/master/object-cache.php > "${WP_CORE_DIR}/wp-content/object-cache.php"
    fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Maybe run PHP linting.
  - |
    if [[ -n "${PHP_LINT}" ]]; then
      count=$(find . -type "f" -iname "*.php" | wc -l | xargs)
      echo "Running the PHP linter on $count file(s)..."
      if find . -type "f" -iname "*.php" -exec php -l {} \; | grep "^[Parse error|Fatal error]"; then exit 1; fi
    fi

  # Maybe run phpcs.
  - |
    if [[ -n "${WP_PHPCS}" ]]; then
      phpcs
    fi

  # Run phpunit.
  - phpunit

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
